<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | CodePath]]></title>
  <link href="http://codepath.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://codepath.io/"/>
  <updated>2013-01-01T20:32:52-02:00</updated>
  <id>http://codepath.io/</id>
  <author>
    <name><![CDATA[CodePath]]></name>
    <email><![CDATA[hi@codepath.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Skinny Models]]></title>
    <link href="http://codepath.io/blog/2012/12/21/skinny-models/"/>
    <updated>2012-12-21T10:38:00-02:00</updated>
    <id>http://codepath.io/blog/2012/12/21/skinny-models</id>
    <content type="html"><![CDATA[<p>Many times I found myself with fat models (ugh) having lots of methods for different formats of the data they have so they can be easily accessed on the views/controllers.
Here's a few examples of it:</p>

<p>``` ruby
class Project</p>

<p>  # Example 1
  attr_accessor :tasks_count, :completed_tasks_count</p>

<p>  def pretty_completed_percentage # Not pretty :(</p>

<pre><code>"#{completed_tasks_count * 100 / tasks_count}% completed"
</code></pre>

<p>  end</p>

<p>  # Example 2
  attr_accessor :comments</p>

<p>  def last_comment</p>

<pre><code>doc = Nokogiri::HTML(comments.last.content) # Crying already
# ...
doc
</code></pre>

<p>  end</p>

<p>  # Example 3
  def to_json</p>

<pre><code># WHY ?!?!?
</code></pre>

<p>  end
end
```</p>

<!-- more -->


<p>All of these things could have been made out of the actual project attributes which are publicly visible.
The problem here is that we are delegating the presentation and formatting of the data in the models.
To many this might seem OK, but to me, models should not be responsible for it, and should remain skinny.</p>

<p><code>ruby
class Project
  attr_accessor :tasks_count, :completed_tasks_count, :started_at
end
</code></p>

<p>A model is basically in charge of dealing with the data storage and application logic. You shouldn't treat your models as an API willing to do whatever you need.
In an MVC environment, adding all these logic into the controllers might not be a very good idea either, since you might end up stuffing too much code into them.
The best solution (which has worked for me) is to add new 'services' (or w/e you want to call it) in between and leave models alone. After all, MVC might not be the best for large web applications..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Redis]]></title>
    <link href="http://codepath.io/blog/2012/08/27/ruby-on-redis/"/>
    <updated>2012-08-27T10:00:00-03:00</updated>
    <id>http://codepath.io/blog/2012/08/27/ruby-on-redis</id>
    <content type="html"><![CDATA[<p>Ever since I found out about the no-sql databases and since they became very popular lately, I wanted to write a blog post about my favourite one: <a href="http://redis.io/">Redis</a>.</p>

<p>What I love so much about it is its simple API. In my honest opinion, one of the very best API's that I've found so far.</p>

<p>Also, since it's a lightweight and fast key-value store, it's specially useful for speeding up slow processes on your system. If things go slow, you should always consider using Redis, if it applies, it will speed things up.</p>

<!-- more -->


<p>The Ruby gem redis is as easy to use as redis API.
Here's a quick look of it's usage on Rails. Where there's an AR Ranking model, which stores in a sorted set a list of albums to easily get the top [n] albums.</p>

<p>``` ruby On config/initializers/redis.rb</p>

<h1>Setup the connection to the redis server</h1>

<p>$redis = Redis.new(host: 'localhost', port: 6379)
```</p>

<p>``` ruby On app/models/album_ranking.rb
class AlbumRanking &lt; ActiveRecord::Base</p>

<p>  def top_albums(n)</p>

<pre><code>$redis.zrevrange(albums_key, 0, n - 1)
</code></pre>

<p>  end</p>

<p>  def albums=(albums)</p>

<pre><code>$redis.multi do
  remove_all_albums
  albums.each {|a| add_album(a) }
end
</code></pre>

<p>  end</p>

<p>  def add_album(album)</p>

<pre><code>$redis.zadd(albums_key, album.downloads_number, album.id)
</code></pre>

<p>  end</p>

<p>  def remove_album(album)</p>

<pre><code>$redis.zrem(albums_key, album.id)
</code></pre>

<p>  end</p>

<p>  def remove_all_albums</p>

<pre><code>$redis.del(albums_key)
</code></pre>

<p>  end</p>

<p>  def albums_key</p>

<pre><code>"album_ranking:#{id}:albums"
</code></pre>

<p>  end
end
```</p>

<p>Besides keeping track of sorted elements in a fast way, there are also many other useful ways in which redis could be used.
Here's a list of them with a few interesting related resources:</p>

<ul>
<li>Caching resources (in XML or JSON), <a href="http://antirez.com/post/redis-as-LRU-cache.html">LRU caching</a>.</li>
<li>Having data which automatically expires. Another excellent feature needed for LRU caching.</li>
<li>Queues. Highly used by the <a href="https://github.com/defunkt/resque/blob/master/lib/resque/queue.rb#L29">resque gem</a></li>
<li>Keeping highly variable counters (page views, thumbs up, etc). Here's a <a href="http://flask.pocoo.org/snippets/71/">Flask snippet</a>.</li>
<li>Working with large sets of data (where you don't want repeated elements).</li>
</ul>


<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
